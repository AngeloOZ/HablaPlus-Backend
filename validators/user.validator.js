const { check } = require("express-validator");
const { validateResult } = require("../helpers/validateHelper");

const validateInsertUser = [
   check('names')
      .exists()
      .withMessage("names is required")
      .bail()
      .notEmpty()
      .withMessage("names must not be empty")
      .bail()
      .trim(),
   check('surname')
      .exists()
      .withMessage("surname is required")
      .bail()
      .notEmpty()
      .withMessage("surname must not be empty")
      .bail()
      .trim(),
   check('age')
      .exists()
      .withMessage('age is required')
      .bail()
      .notEmpty()
      .withMessage('age must not be empty')
      .bail()
      .isInt()
      .withMessage('age is not integer')
      .bail()
      .toInt(),
   check('username')
      .exists()
      .withMessage('username is required')
      .bail()
      .notEmpty()
      .withMessage('username must not be empty')
      .bail()
      .isAlphanumeric()
      .trim(),
   check('password')
      .exists()
      .withMessage('password is required')
      .bail()
      .notEmpty()
      .withMessage('password must not be empty')
      .bail()
      .isAlphanumeric()
      .trim(),
   check('id_type')
      .exists()
      .withMessage('id_type is required')
      .bail()
      .notEmpty()
      .withMessage('id_type must not be empty')
      .bail()
      .isInt()
      .withMessage('id_type is not integer')
      .toInt(),
   (req, res, next) => validateResult(req, res, next)
];

const validateUpdateUser = [
   check('id_user')
      .exists()
      .withMessage('id_user is required')
      .bail()
      .notEmpty()
      .withMessage('id_user must not be empty')
      .bail()
      .isInt()
      .toInt(),
   check('names')
      .exists()
      .withMessage("names is required")
      .bail()
      .notEmpty()
      .withMessage("names must not be empty")
      .bail()
      .trim(),
   check('surname')
      .exists()
      .withMessage("surname is required")
      .bail()
      .notEmpty()
      .withMessage("surname must not be empty")
      .bail()
      .trim(),
   check('age')
      .exists()
      .withMessage('age is required')
      .bail()
      .notEmpty()
      .withMessage('age must not be empty')
      .bail()
      .isInt()
      .withMessage('age is not integer')
      .bail()
      .toInt(),
   check('username')
      .exists()
      .withMessage('username is required')
      .bail()
      .notEmpty()
      .withMessage('username must not be empty')
      .bail()
      .isAlphanumeric()
      .trim(),
   check('newPassword')
      .optional()
      .notEmpty()
      .withMessage('password must not be empty')
      .bail()
      .isAlphanumeric()
      .trim(),
   check('id_type')
      .exists()
      .withMessage('id_type is required')
      .bail()
      .notEmpty()
      .withMessage('id_type must not be empty')
      .bail()
      .isInt()
      .withMessage('id_type is not integer')
      .toInt(),
   (req, res, next) => validateResult(req, res, next)
];

const validateIdUser = [
   check('id')
      .exists()
      .withMessage('id user is required')
      .bail()
      .isInt()
      .withMessage("id must be integer")
      .toInt(),
   (req, res, next) => validateResult(req, res, next)
];

const validateRegisterUser = [
   check('names')
      .exists()
      .withMessage("names is required")
      .bail()
      .notEmpty()
      .withMessage("names must not be empty")
      .bail()
      .not()
      .trim(),
   check('surname')
      .exists()
      .withMessage("surname is required")
      .bail()
      .notEmpty()
      .withMessage("surname must not be empty")
      .bail()
      .trim(),
   check('age')
      .exists()
      .withMessage('age is required')
      .bail()
      .notEmpty()
      .withMessage('age must not be empty')
      .bail()
      .isInt()
      .withMessage('age is not integer')
      .bail()
      .toInt(),
   check('username')
      .exists()
      .withMessage('username is required')
      .bail()
      .notEmpty()
      .withMessage('username must not be empty')
      .bail()
      .isAlphanumeric(),
   check('password')
      .exists()
      .withMessage('password is required')
      .bail()
      .notEmpty()
      .withMessage('password must not be empty')
      .bail()
      .isAlphanumeric()
      .trim(),
   (req, res, next) => validateResult(req, res, next)
];

const validateLogin = [
   check('username')
      .exists()
      .withMessage('username is required')
      .bail()
      .notEmpty()
      .withMessage('username must not be empty')
      .bail()
      .isAlphanumeric(),
   check('password')
      .exists()
      .withMessage('password is required')
      .bail()
      .notEmpty()
      .withMessage('password must not be empty')
      .bail()
      .isAlphanumeric()
      .trim(),
   (req, res, next) => validateResult(req, res, next)
];

module.exports = { validateInsertUser, validateUpdateUser, validateIdUser, validateLogin, validateRegisterUser }
